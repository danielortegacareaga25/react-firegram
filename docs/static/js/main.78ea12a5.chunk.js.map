{"version":3,"sources":["firebase/config.js","hooks/useStorage.js","components/ProgressBar.jsx","components/UploadForm.jsx","components/Title.jsx","hooks/useFirestore.js","components/ImageGrid.jsx","components/Modal.jsx","App.jsx","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","add","createdAt","ProgressBar","setFile","div","className","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","Title","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","React","memo","setSelectedImg","map","key","onClick","whileHover","opacity","layout","img","src","alt","transition","delay","Modal","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78ea12a5.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/storage\";\r\nimport \"firebase/firestore\";\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyBaWUibcQAQupu6AkZQgIi3HIRD5cgoqhQ\",\r\n  authDomain: \"firegram-ff6a6.firebaseapp.com\",\r\n  databaseURL: \"https://firegram-ff6a6.firebaseio.com\",\r\n  projectId: \"firegram-ff6a6\",\r\n  storageBucket: \"firegram-ff6a6.appspot.com\",\r\n  messagingSenderId: \"951680061367\",\r\n  appId: \"1:951680061367:web:cc5227bec00175b2cf2232\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  projectStorage,\r\n  projectFirestore,\r\n  timestamp,\r\n} from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n  const [progress, setProgress] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [url, setUrl] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const storageRef = projectStorage.ref(file.name);\r\n    const collectionRef = projectFirestore.collection(\"images\");\r\n    storageRef.put(file).on(\r\n      \"state_changed\",\r\n      (snap) => {\r\n        const percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n        setProgress(percentage);\r\n      },\r\n      (err) => {\r\n        setError(err);\r\n      },\r\n      async () => {\r\n        const url = await storageRef.getDownloadURL();\r\n        collectionRef.add({ url: url, createdAt: timestamp() });\r\n        setUrl(url);\r\n      }\r\n    );\r\n  }, [file]);\r\n\r\n  return { progress, url, error };\r\n};\r\n\r\nexport default useStorage;\r\n","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\";\r\nconst ProgressBar = ({ file, setFile }) => {\r\n  const { progress, url } = useStorage(file);\r\n  useEffect(() => {\r\n    if (url) {\r\n      setFile(null);\r\n    }\r\n  }, [url, setFile]);\r\n  return (\r\n    <>\r\n      <motion.div\r\n        className=\"progress-bar\"\r\n        initial={{ width: 0 }}\r\n        animate={{ width: progress + \"%\" }}\r\n      >\r\n        Progress\r\n      </motion.div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n\r\n  const changeHandler = (e) => {\r\n    const selected = e.target.files[0];\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(null);\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Por favor selecciona una imagen (png or jpeg)\");\r\n    }\r\n  };\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type=\"file\" onChange={changeHandler} />\r\n        <span>+</span>\r\n      </label>\r\n      <div className=\"output\">\r\n        {error && <div className=\"error\">{error}</div>}\r\n        {file && <div>{file.name}</div>}\r\n        {file && <ProgressBar file={file} setFile={setFile} />}\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React from \"react\";\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram by Daniel &#169;</h1>\n      <h2>Tus fotos</h2>\n      <p>Sube tus fotograf√≠as</p>\n    </div>\n  );\n};\n\nexport default Title;\n","import { useState, useEffect } from \"react\";\r\n\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = projectFirestore\r\n      .collection(collection)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snap) => {\r\n        const documents = [];\r\n        snap.forEach((doc) => {\r\n          documents.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        setDocs(documents);\r\n      });\r\n    return () => unsub();\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n};\r\n\r\nexport default useFirestore;\r\n","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ImageGrid = React.memo(({ setSelectedImg }) => {\r\n  const { docs } = useFirestore(\"images\");\r\n  return (\r\n    <>\r\n      <div className=\"img-grid\">\r\n        {docs &&\r\n          docs.map((doc) => (\r\n            <motion.div\r\n              className=\"img-wrap\"\r\n              key={doc.id}\r\n              onClick={() => setSelectedImg(doc.url)}\r\n              whileHover={{ opacity: 1 }}\r\n              layout\r\n            >\r\n              <motion.img\r\n                src={doc.url}\r\n                alt=\"image\"\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                transition={{ delay: 1 }}\r\n              />\r\n            </motion.div>\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default ImageGrid;\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n  const handleClick = (e) => {\r\n    if (e.target.classList.contains(\"backdrop\")) {\r\n      setSelectedImg(null);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <motion.div\r\n        className=\"backdrop\"\r\n        onClick={handleClick}\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n      >\r\n        <motion.img\r\n          src={selectedImg}\r\n          alt=\"modal\"\r\n          initial={{ y: \"-100vh\" }}\r\n          animate={{ y: 0 }}\r\n        />\r\n      </motion.div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\n\nimport UploadForm from \"./components/UploadForm\";\nimport Title from \"./components/Title\";\nimport ImageGrid from \"./components/ImageGrid\";\nimport Modal from \"./components/Modal\";\nimport { useState } from \"react\";\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      {selectedImg && (\n        <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}